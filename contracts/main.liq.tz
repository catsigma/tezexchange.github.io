parameter (pair string (or (pair nat (contract (or (pair key_hash (pair nat (pair nat tez))) (or (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez))))) (or (pair key_hash nat) unit))) (list (pair key_hash tez)))) (or (pair nat (pair nat tez)) (or (pair nat (pair nat (pair nat (pair nat tez)))) (or nat unit))))); storage (pair key_hash (pair (map string (pair nat (contract (or (pair key_hash (pair nat (pair nat tez))) (or (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez))))) (or (pair key_hash nat) unit))) (list (pair key_hash tez))))) (map key_hash tez))); return unit; code { DUP ; DIP { CDR ; } ; CAR ; DUP ; DUP ; CAR ; DUUUUP ; CDAR ; DUUP ; GET ; IF_NONE { FAIL ; } { DUUUP ; CDR ; IF_LEFT { DUUUUUUP ; CAR ; SOURCE unit unit ; MANAGER ; COMPARE ; NEQ ; IF { FAIL ; } { DUUUUUUP ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUUP ; CDAR ; DUUUUP ; CDR ; DUUUUUP ; CAR ; PAIR ; SOME ; DUUUUUUUP ; UPDATE ; PAIR ; SWAP ; PAIR ; PUSH (list (pair key_hash tez)) (List) ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; } { IF_LEFT { DUP ; CAR ; DUUUUUUUP ; DUUUUP ; CDR ; PUSH tez "0" ; PUSH nat 1 ; DUUUUUP ; COMPARE ; EQ ; IF { AMOUNT ; } { DUUUUUP ; CDR ; CDR ; } ; DIIIIIIP { DROP ; DROP ; DROP ; DROP ; DROP ; } ; DUUUUUUP ; DIIIIIIP { DROP ; } ; CDR ; CAR ; PAIR ; DUUUUUP ; DIIIIIP { DROP ; } ; PAIR ; SOURCE unit unit ; MANAGER ; PAIR ; LEFT (or (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez))))) (or (pair key_hash nat) unit)) ; TRANSFER_TOKENS ; SWAP ; SWAP ; PAIR ; } { IF_LEFT { DUP ; DUP ; CAR ; DUUUUUUUUP ; DUUUUUP ; CDR ; PUSH tez "0" ; DUUUUUP ; CDR ; CDDR ; DUUUUUUP ; CDR ; CDAR ; PAIR ; DUUUUUUP ; CDR ; CAR ; PAIR ; PUSH nat 0 ; DUUUUUUP ; COMPARE ; EQ ; IF { AMOUNT ; PUSH nat 0 ; PAIR ; } { PUSH tez "0" ; DUUUUUUP ; PAIR ; } ; DIIIIIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; PAIR ; SOURCE unit unit ; MANAGER ; PAIR ; LEFT (or (pair key_hash nat) unit) ; RIGHT (pair key_hash (pair nat (pair nat tez))) ; TRANSFER_TOKENS ; SWAP ; SWAP ; PAIR ; } { IF_LEFT { DIIP { DROP ; DROP ; DROP ; } ; DUUUP ; DIIIP { DROP ; } ; DUUUP ; DIIIP { DROP ; } ; CDR ; PUSH tez "0" ; DUUUUP ; DIIIIP { DROP ; } ; SOURCE unit unit ; MANAGER ; PAIR ; LEFT unit ; RIGHT (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez))))) ; RIGHT (pair key_hash (pair nat (pair nat tez))) ; TRANSFER_TOKENS ; SWAP ; SWAP ; PAIR ; } { SOURCE unit unit ; MANAGER ; DUUUUUUUP ; CDDR ; DUUP ; GET ; IF_NONE { FAIL ; } { DUUUUUUUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DIIIIP { DROP ; DROP ; DROP ; DROP ; DROP ; } ; DUUUUUP ; DIIIIIP { DROP ; } ; CDDR ; PUSH (option tez) None ; DUUUUUUP ; DIIIIIIP { DROP ; } ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SOURCE unit unit ; DUUUP ; DIIIP { DROP ; } ; PUSH unit Unit ; TRANSFER_TOKENS ; DROP ; PUSH (list (pair key_hash tez)) (List) ; PAIR ; } ; } ; } ; } ; } ; DUP ; CAR ; DUUP ; CDR ; DUP ; CDDR ; DUUUP ; PAIR ; PUSH bool True ; LOOP { DUP ; DUP ; CAR ; DUUP ; CDR ; DUUP ; IF_CONS { DUP ; DUP ; CAR ; DUUUUUP ; DUUUP ; CDR ; DUUUUUUUP ; DUUUUP ; GET ; IF_NONE { PUSH tez "0" ; } {} ; DIIIIP { DROP ; DROP ; } ; ADD ; SOME ; DUUUP ; DIIIP { DROP ; } ; UPDATE ; SWAP ; PAIR ; PUSH bool True ; PAIR ; } { DUP ; DUUUP ; PAIR ; PUSH bool False ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; DUP ; CAR ; DIP { CDR ; } ; } ; DUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DIIIP { DROP ; DROP ; DROP ; } ; DUUUP ; DIIIP { DROP ; } ; CDR ; SWAP ; PAIR ; SWAP ; PAIR ; PUSH unit Unit ; PAIR ; } ; } 