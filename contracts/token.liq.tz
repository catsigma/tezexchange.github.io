parameter (or unit (or key_hash (or unit (or (pair key_hash nat) (or (pair key_hash nat) (or (pair key_hash (pair key_hash nat)) (pair key_hash key_hash))))))); storage (pair (pair nat (pair nat (pair string string))) (pair (map key_hash nat) (map key_hash (map key_hash nat)))); return (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))); code { DUP ; DIP { CDR ; } ; CAR ; DUP ; IF_LEFT { DROP ; DUUP ; DUUUP ; CAR ; LEFT (or nat (map key_hash nat)) ; RIGHT unit ; PAIR ; } { IF_LEFT { DUUUP ; DUUUUP ; CDAR ; DUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; DIIP { DROP ; } ; LEFT (map key_hash nat) ; RIGHT (pair nat (pair nat (pair string string))) ; RIGHT unit ; PAIR ; } { IF_LEFT { DROP ; DUUP ; DUUUP ; CDAR ; RIGHT nat ; RIGHT (pair nat (pair nat (pair string string))) ; RIGHT unit ; PAIR ; } { IF_LEFT { SOURCE unit unit ; MANAGER ; DUUP ; CAR ; DUUUP ; CDR ; DUP ; DUUUUUUUP ; CDAR ; DUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUUUUP ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUUUP ; CDAR ; DUUUUP ; SOME ; DUUUUUUUUP ; UPDATE ; DUUUUUUUUUUP ; CDAR ; DUUUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; DIIIIP { DROP ; } ; DUUUUUP ; ADD ; SOME ; DUUUUUUP ; UPDATE ; PAIR ; SWAP ; PAIR ; PUSH (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))) (Left Unit) ; PAIR ; } { FAIL ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } { IF_LEFT { SOURCE unit unit ; MANAGER ; DUUUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DUUUUUUP ; CDDR ; DUUUUUUUP ; CDDR ; DUUUUUP ; GET ; IF_NONE { PUSH (map key_hash nat) (Map) ; } {} ; DUUUUUUP ; CDR ; SOME ; DUUUUUUUP ; DIIIIIIIP { DROP ; } ; CAR ; UPDATE ; SOME ; DUUUUUP ; DIIIIIP { DROP ; } ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PUSH (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))) (Left Unit) ; PAIR ; } { IF_LEFT { DUP ; CAR ; DUUP ; CDAR ; DUUUP ; CDDR ; DUUUUUUP ; CDDR ; DUUUUP ; GET ; IF_NONE { FAIL ; } { DUP ; DUUUUP ; GET ; IF_NONE { FAIL ; } { DUUUP ; DUUP ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUP ; DUUUUUUUUUUP ; CDAR ; DUUUUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUUUUUUUP ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUUUUUUP ; CDAR ; DUUUUUUUUUUUUUP ; CDAR ; DUUUUUUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; DUUUUUUUUUP ; ADD ; SOME ; DUUUUUUUUUUP ; UPDATE ; DUUUUP ; SOME ; DUUUUUUUUUUUP ; UPDATE ; PAIR ; SWAP ; PAIR ; DUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DIIIP { DROP ; } ; DUUUP ; DIIIP { DROP ; } ; CDDR ; DUUUUUUP ; DUUUUUP ; SOME ; DUUUUUUUUUUP ; UPDATE ; SOME ; DUUUUUUUUUUP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PUSH (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))) (Left Unit) ; PAIR ; } { FAIL ; } ; DIP { DROP ; } ; } { FAIL ; } ; DIP { DROP ; } ; } ; DIP { DROP ; } ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } { DUUUP ; CDDR ; DUUP ; CAR ; GET ; IF_NONE { DUUUP ; PUSH (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))) (Right (Right (Left 0))) ; PAIR ; } { DUP ; DUUUP ; CDR ; GET ; IF_NONE { DUUUUP ; PUSH (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))) (Right (Right (Left 0))) ; PAIR ; } { DUUUUUP ; SWAP ; LEFT (map key_hash nat) ; RIGHT (pair nat (pair nat (pair string string))) ; RIGHT unit ; PAIR ; } ; DIP { DROP ; } ; } ; DIP { DROP ; } ; } ; } ; } ; } ; } ; } ; DIP { DROP ; DROP ; } ; } 