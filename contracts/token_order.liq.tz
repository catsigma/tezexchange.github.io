parameter (or (pair key_hash (pair nat (pair nat tez))) (or (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez))))) (or (pair key_hash nat) unit))); storage (pair (option (pair key_hash (pair nat (pair nat tez)))) (pair (option (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez)))))) (pair key_hash (pair (contract (pair (pair key_hash (pair (pair nat tez) (pair nat (pair nat (pair nat tez))))) (pair (map nat (pair nat (pair (pair nat tez) key_hash))) (map key_hash nat))) (pair (list (pair key_hash tez)) (pair (map nat (pair nat (pair (pair nat tez) key_hash))) (map key_hash nat)))) (pair (contract (or unit (or key_hash (or unit (or (pair key_hash nat) (or (pair key_hash nat) (or (pair key_hash (pair key_hash nat)) (pair key_hash key_hash))))))) (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat))))) (pair (map nat (pair nat (pair (pair nat tez) key_hash))) (pair nat (map key_hash nat)))))))); return (list (pair key_hash tez)); code { DUP ; DIP { CDR ; } ; CAR ; DUP ; IF_LEFT { DUP ; CAR ; DUUP ; CDAR ; DUUUP ; CDDR ; CAR ; DUUUUUUP ; CDDAR ; SOURCE unit unit ; MANAGER ; COMPARE ; NEQ ; IF { FAIL ; } { DUUUUUUP ; CDR ; DUUUUUP ; CDDR ; CDR ; DUUUP ; PAIR ; DUUUUP ; PAIR ; DUUUUUP ; PAIR ; SOME ; PAIR ; PUSH nat 0 ; DUUUUP ; COMPARE ; EQ ; IF { DIIP { DROP ; } ; DUP ; DUUP ; CDDDDAR ; PUSH tez "0" ; DUUUUUP ; DIIIIIP { DROP ; } ; DUUUUUP ; DIIIIIP { DROP ; } ; DIIIIIIP { DROP ; DROP ; DROP ; } ; CDDAR ; PAIR ; DUUUUUP ; DIIIIIP { DROP ; } ; PAIR ; LEFT (pair key_hash key_hash) ; RIGHT (pair key_hash nat) ; RIGHT (pair key_hash nat) ; RIGHT unit ; RIGHT key_hash ; RIGHT unit ; TRANSFER_TOKENS ; DROP ; } { DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; } ; DUP ; CAR ; IF_NONE { FAIL ; } {} ; DUP ; CAR ; DUUP ; CDAR ; DUUUP ; CDDR ; CAR ; DUUUUP ; CDDR ; CDR ; DUUUUUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CDR ; PUSH nat 1 ; DUUUUUUUUUUUUUUP ; CDDDDDDAR ; ADD ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; DUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUP ; CDDDDDAR ; DUUUUUUUUUUUUP ; DUUUUUUUUUUP ; DIIIIIIIIIIP { DROP ; } ; DUUUUUUUUUUUP ; DIIIIIIIIIIIP { DROP ; } ; DIIIIIIIIIIIIP { DROP ; DROP ; DROP ; } ; PAIR ; PAIR ; DUUUUUUUUUUP ; DIIIIIIIIIIP { DROP ; } ; PAIR ; SOME ; DUUUUUUUUUP ; DIIIIIIIIIP { DROP ; } ; CDDDDDDAR ; UPDATE ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; PUSH (list (pair key_hash tez)) (List) ; PAIR ; } ; } { IF_LEFT { DUP ; CAR ; DUUP ; CDAR ; CAR ; DUUUUUP ; CDDAR ; SOURCE unit unit ; MANAGER ; COMPARE ; NEQ ; IF { FAIL ; } { DUUUUUP ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUP ; CDDR ; CDDR ; DUUUUUUP ; CDDR ; CDAR ; PAIR ; DUUUUUUP ; CDDR ; CAR ; PAIR ; DUUUUUUP ; CDAR ; CDR ; DUUUUUP ; PAIR ; PAIR ; DUUUUUP ; PAIR ; SOME ; PAIR ; SWAP ; PAIR ; PUSH nat 0 ; DUUUP ; COMPARE ; NEQ ; IF { DUP ; DUUP ; CDDDDAR ; PUSH tez "0" ; DUUUUUP ; DIIIIIP { DROP ; } ; DUUUUUP ; DIIIIIP { DROP ; } ; DIIIIIIP { DROP ; DROP ; DROP ; } ; CDDAR ; PAIR ; DUUUUUP ; DIIIIIP { DROP ; } ; PAIR ; LEFT (pair key_hash key_hash) ; RIGHT (pair key_hash nat) ; RIGHT (pair key_hash nat) ; RIGHT unit ; RIGHT key_hash ; RIGHT unit ; TRANSFER_TOKENS ; DROP ; } { DIP { DROP ; DROP ; DROP ; DROP ; DROP ; } ; } ; DUP ; CDAR ; IF_NONE { FAIL ; } {} ; DUUP ; DUUUP ; CDDDAR ; PUSH tez "0" ; DUUUUUP ; CDDDDDDDR ; DUUUUUUP ; DIIIIIIP { DROP ; } ; CDDDDDAR ; PAIR ; DUUUUUP ; DIIIIIP { DROP ; } ; PAIR ; TRANSFER_TOKENS ; DUP ; DUP ; CDR ; DUUUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUP ; CAR ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DUUUUUUUUP ; DIIIIIIIIP { DROP ; } ; DIIIIIIIIIP { DROP ; DROP ; } ; CDR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; CAR ; PAIR ; } ; } { IF_LEFT { DUP ; CAR ; DUUP ; CDR ; DUUUUUP ; CDDAR ; SOURCE unit unit ; MANAGER ; COMPARE ; NEQ ; IF { FAIL ; } { DUUUUUP ; CDDDDDAR ; DUUP ; GET ; IF_NONE { FAIL ; } { DUP ; CDDR ; DUUUUP ; COMPARE ; NEQ ; IF { FAIL ; } { DUUUUUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUUUUUUP ; CDDDDDAR ; PUSH (option (pair nat (pair (pair nat tez) key_hash))) None ; DUUUUUUUUUUP ; UPDATE ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; PUSH nat 1 ; DUUUP ; CAR ; COMPARE ; EQ ; IF { DUP ; PUSH (list (pair key_hash tez)) (List) ; DUUUUP ; CDAR ; CDR ; DUUUUUUUP ; PAIR ; CONS ; PAIR ; } { DUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DUUUUUUUUP ; CDDDDDDDR ; DUUUUUUUUUUP ; CDAR ; CAR ; DUUUUUUUUUUP ; CDDDDDDDR ; DUUUUUUUUUUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; ADD ; SOME ; DUUUUUUUUUUUUUP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; PUSH (list (pair key_hash tez)) (List) ; PAIR ; } ; DIP { DROP ; } ; } ; DIP { DROP ; } ; } ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; } ; } { SOURCE unit unit ; MANAGER ; DUUUUP ; CDDDDDDDR ; DUUP ; GET ; IF_NONE { FAIL ; } { DUUUUUP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; DROP ; DUUUUUUUUUUUUP ; CDDDDDDDR ; PUSH (option nat) None ; DUUUUUUUUUUUP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; DUP ; SWAP ; CDDDDAR ; PUSH tez "0" ; DUUUUP ; DIIIIP { DROP ; } ; DIIIIIP { DROP ; DROP ; DROP ; } ; DUUUUUP ; DIIIIIP { DROP ; } ; PAIR ; LEFT (or (pair key_hash nat) (or (pair key_hash (pair key_hash nat)) (pair key_hash key_hash))) ; RIGHT unit ; RIGHT key_hash ; RIGHT unit ; TRANSFER_TOKENS ; DROP ; PUSH (list (pair key_hash tez)) (List) ; PAIR ; } ; } ; } ; } ; } 